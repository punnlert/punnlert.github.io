import{S as Nt,i as Lt,s as Wt,k as o,q as i,a as h,y as Kt,l as s,m as l,r as c,h as t,c as f,z as Gt,n as r,b as p,G as a,A as It,g as qt,d as Ft,B as Rt,M as Ut}from"../chunks/index.963f39ba.js";import{C as Zt}from"../chunks/CodeBlock.d6ac5a85.js";function Jt(He){let u,Z=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hero</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>About</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span></code>`;return{c(){u=o("pre"),this.h()},l(d){u=s(d,"PRE",{class:!0});var B=l(u);B.forEach(t),this.h()},h(){r(u,"class","language-html")},m(d,B){p(d,u,B),u.innerHTML=Z},p:Ut,d(d){d&&t(u)}}}function Qt(He){let u,Z,d,B,$e,ae,T,v,oe,Se,se,m,xe,M,ze,je,J,Oe,De,le,C,b,re,Be,ne,L,Me,ie,H,k,ce,Ne,pe,W,Le,ue,$,E,he,We,fe,K,Ke,de,S,me,x,_,we,Ge,ve,w,Ie,N,qe,Fe,Q,Re,Ue,be,z,g,ke,Ze,Ee,G,Je,_e,j,y,Qe,V,Ve,Xe,X,Ye,et,tt,P,at,Y,ot,st,ee,lt,rt,ge,O,A,ye,nt,Pe,D,it,I,ct,pt,Ae;return S=new Zt({props:{lang:"html",filename:"+page.svelte",$$slots:{default:[Jt]},$$scope:{ctx:He}}}),{c(){u=o("p"),Z=i("This project follows the basic "),d=o("a"),B=i("SvelteKit structure"),$e=i(", with some added conventions to make customization a post-management easier."),ae=h(),T=o("h2"),v=o("a"),oe=o("span"),Se=i("Components"),se=h(),m=o("p"),xe=i("The components are organized following the "),M=o("a"),ze=i("Atomic Design"),je=i(" principles, albeit somewhat simplified. Components are in the "),J=o("code"),Oe=i("src/lib/components"),De=i(" folder, and are organized in the following way:"),le=h(),C=o("h3"),b=o("a"),re=o("span"),Be=i("Atoms"),ne=h(),L=o("p"),Me=i("Atoms are the most basic components, which can be seen as building blocks for other components. They’re small and self-contained, and do only one thing. Examples of atoms are buttons, inputs, and tags."),ie=h(),H=o("h3"),k=o("a"),ce=o("span"),Ne=i("Molecules"),pe=h(),W=o("p"),Le=i("Molecules are groups of atoms that work together to form a more complex component. Examples of molecules are cards, groups of links, or an alert callout."),ue=h(),$=o("h3"),E=o("a"),he=o("span"),We=i("Organisms"),fe=h(),K=o("p"),Ke=i("Organisms, in this project, are code blocks that represent a section of a page, such as the header, footer and hero section. They can be used directly in a page as a sort of building block, so the page’s code can be as simple as this:"),de=h(),Kt(S.$$.fragment),me=h(),x=o("h2"),_=o("a"),we=o("span"),Ge=i("Component Gallery"),ve=h(),w=o("p"),Ie=i("This project uses "),N=o("a"),qe=i("Histoire"),Fe=i(" to be able to see and develop components in isolation. To open it, run "),Q=o("code"),Re=i("npm run story:dev"),Ue=i(". This way you can customize and build new components with placeholder content and without worrying about where to put them in a page."),be=h(),z=o("h2"),g=o("a"),ke=o("span"),Ze=i("Pages"),Ee=h(),G=o("p"),Je=i("Pages obey the default SvelteKit structure, but can be summarized as follows:"),_e=h(),j=o("ul"),y=o("li"),Qe=i("There are two different file types: the pages ("),V=o("code"),Ve=i("+page.svelte"),Xe=i(") and the layouts ("),X=o("code"),Ye=i("+layout.svelte"),et=i("). Layouts are a way to reuse the same structure between different pages without having to duplicate code;"),tt=h(),P=o("li"),at=i("There are two different page layouts in this site: the “Waves” layout, which all pages inside the "),Y=o("code"),ot=i("(waves)"),st=i(" folder use, and the “Blog Article” layout, which all pages inside the "),ee=o("code"),lt=i("(blog-article)"),rt=i(" folder use;"),ge=h(),O=o("h2"),A=o("a"),ye=o("span"),nt=i("Blog Posts"),Pe=h(),D=o("p"),it=i("To know how blog posts work and how to create new ones, check out "),I=o("a"),ct=i("How Blog Posts Work"),pt=i("."),this.h()},l(e){u=s(e,"P",{});var n=l(u);Z=c(n,"This project follows the basic "),d=s(n,"A",{href:!0,rel:!0});var te=l(d);B=c(te,"SvelteKit structure"),te.forEach(t),$e=c(n,", with some added conventions to make customization a post-management easier."),n.forEach(t),ae=f(e),T=s(e,"H2",{id:!0});var ut=l(T);v=s(ut,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var bt=l(v);oe=s(bt,"SPAN",{}),l(oe).forEach(t),bt.forEach(t),Se=c(ut,"Components"),ut.forEach(t),se=f(e),m=s(e,"P",{});var q=l(m);xe=c(q,"The components are organized following the "),M=s(q,"A",{href:!0,rel:!0});var kt=l(M);ze=c(kt,"Atomic Design"),kt.forEach(t),je=c(q," principles, albeit somewhat simplified. Components are in the "),J=s(q,"CODE",{});var Et=l(J);Oe=c(Et,"src/lib/components"),Et.forEach(t),De=c(q," folder, and are organized in the following way:"),q.forEach(t),le=f(e),C=s(e,"H3",{id:!0});var ht=l(C);b=s(ht,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var _t=l(b);re=s(_t,"SPAN",{}),l(re).forEach(t),_t.forEach(t),Be=c(ht,"Atoms"),ht.forEach(t),ne=f(e),L=s(e,"P",{});var gt=l(L);Me=c(gt,"Atoms are the most basic components, which can be seen as building blocks for other components. They’re small and self-contained, and do only one thing. Examples of atoms are buttons, inputs, and tags."),gt.forEach(t),ie=f(e),H=s(e,"H3",{id:!0});var ft=l(H);k=s(ft,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var yt=l(k);ce=s(yt,"SPAN",{}),l(ce).forEach(t),yt.forEach(t),Ne=c(ft,"Molecules"),ft.forEach(t),pe=f(e),W=s(e,"P",{});var Pt=l(W);Le=c(Pt,"Molecules are groups of atoms that work together to form a more complex component. Examples of molecules are cards, groups of links, or an alert callout."),Pt.forEach(t),ue=f(e),$=s(e,"H3",{id:!0});var dt=l($);E=s(dt,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var At=l(E);he=s(At,"SPAN",{}),l(he).forEach(t),At.forEach(t),We=c(dt,"Organisms"),dt.forEach(t),fe=f(e),K=s(e,"P",{});var Tt=l(K);Ke=c(Tt,"Organisms, in this project, are code blocks that represent a section of a page, such as the header, footer and hero section. They can be used directly in a page as a sort of building block, so the page’s code can be as simple as this:"),Tt.forEach(t),de=f(e),Gt(S.$$.fragment,e),me=f(e),x=s(e,"H2",{id:!0});var mt=l(x);_=s(mt,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var Ct=l(_);we=s(Ct,"SPAN",{}),l(we).forEach(t),Ct.forEach(t),Ge=c(mt,"Component Gallery"),mt.forEach(t),ve=f(e),w=s(e,"P",{});var F=l(w);Ie=c(F,"This project uses "),N=s(F,"A",{href:!0,rel:!0});var Ht=l(N);qe=c(Ht,"Histoire"),Ht.forEach(t),Fe=c(F," to be able to see and develop components in isolation. To open it, run "),Q=s(F,"CODE",{});var $t=l(Q);Re=c($t,"npm run story:dev"),$t.forEach(t),Ue=c(F,". This way you can customize and build new components with placeholder content and without worrying about where to put them in a page."),F.forEach(t),be=f(e),z=s(e,"H2",{id:!0});var wt=l(z);g=s(wt,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var St=l(g);ke=s(St,"SPAN",{}),l(ke).forEach(t),St.forEach(t),Ze=c(wt,"Pages"),wt.forEach(t),Ee=f(e),G=s(e,"P",{});var xt=l(G);Je=c(xt,"Pages obey the default SvelteKit structure, but can be summarized as follows:"),xt.forEach(t),_e=f(e),j=s(e,"UL",{});var Te=l(j);y=s(Te,"LI",{});var R=l(y);Qe=c(R,"There are two different file types: the pages ("),V=s(R,"CODE",{});var zt=l(V);Ve=c(zt,"+page.svelte"),zt.forEach(t),Xe=c(R,") and the layouts ("),X=s(R,"CODE",{});var jt=l(X);Ye=c(jt,"+layout.svelte"),jt.forEach(t),et=c(R,"). Layouts are a way to reuse the same structure between different pages without having to duplicate code;"),R.forEach(t),tt=f(Te),P=s(Te,"LI",{});var U=l(P);at=c(U,"There are two different page layouts in this site: the “Waves” layout, which all pages inside the "),Y=s(U,"CODE",{});var Ot=l(Y);ot=c(Ot,"(waves)"),Ot.forEach(t),st=c(U," folder use, and the “Blog Article” layout, which all pages inside the "),ee=s(U,"CODE",{});var Dt=l(ee);lt=c(Dt,"(blog-article)"),Dt.forEach(t),rt=c(U," folder use;"),U.forEach(t),Te.forEach(t),ge=f(e),O=s(e,"H2",{id:!0});var vt=l(O);A=s(vt,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var Bt=l(A);ye=s(Bt,"SPAN",{}),l(ye).forEach(t),Bt.forEach(t),nt=c(vt,"Blog Posts"),vt.forEach(t),Pe=f(e),D=s(e,"P",{});var Ce=l(D);it=c(Ce,"To know how blog posts work and how to create new ones, check out "),I=s(Ce,"A",{href:!0});var Mt=l(I);ct=c(Mt,"How Blog Posts Work"),Mt.forEach(t),pt=c(Ce,"."),Ce.forEach(t),this.h()},h(){r(d,"href","https://kit.svelte.dev/docs/project-structure"),r(d,"rel","nofollow"),r(v,"class","heading-link"),r(v,"title","Permalink"),r(v,"aria-hidden","true"),r(v,"href","#components"),r(T,"id","components"),r(M,"href","https://medium.com/@WeAreMobile1st/atomic-design-getting-started-916bc81bad0e"),r(M,"rel","nofollow"),r(b,"class","heading-link"),r(b,"title","Permalink"),r(b,"aria-hidden","true"),r(b,"href","#atoms"),r(C,"id","atoms"),r(k,"class","heading-link"),r(k,"title","Permalink"),r(k,"aria-hidden","true"),r(k,"href","#molecules"),r(H,"id","molecules"),r(E,"class","heading-link"),r(E,"title","Permalink"),r(E,"aria-hidden","true"),r(E,"href","#organisms"),r($,"id","organisms"),r(_,"class","heading-link"),r(_,"title","Permalink"),r(_,"aria-hidden","true"),r(_,"href","#component-gallery"),r(x,"id","component-gallery"),r(N,"href","https://histoire.dev"),r(N,"rel","nofollow"),r(g,"class","heading-link"),r(g,"title","Permalink"),r(g,"aria-hidden","true"),r(g,"href","#pages"),r(z,"id","pages"),r(A,"class","heading-link"),r(A,"title","Permalink"),r(A,"aria-hidden","true"),r(A,"href","#blog-posts"),r(O,"id","blog-posts"),r(I,"href","/blog-posts")},m(e,n){p(e,u,n),a(u,Z),a(u,d),a(d,B),a(u,$e),p(e,ae,n),p(e,T,n),a(T,v),a(v,oe),a(T,Se),p(e,se,n),p(e,m,n),a(m,xe),a(m,M),a(M,ze),a(m,je),a(m,J),a(J,Oe),a(m,De),p(e,le,n),p(e,C,n),a(C,b),a(b,re),a(C,Be),p(e,ne,n),p(e,L,n),a(L,Me),p(e,ie,n),p(e,H,n),a(H,k),a(k,ce),a(H,Ne),p(e,pe,n),p(e,W,n),a(W,Le),p(e,ue,n),p(e,$,n),a($,E),a(E,he),a($,We),p(e,fe,n),p(e,K,n),a(K,Ke),p(e,de,n),It(S,e,n),p(e,me,n),p(e,x,n),a(x,_),a(_,we),a(x,Ge),p(e,ve,n),p(e,w,n),a(w,Ie),a(w,N),a(N,qe),a(w,Fe),a(w,Q),a(Q,Re),a(w,Ue),p(e,be,n),p(e,z,n),a(z,g),a(g,ke),a(z,Ze),p(e,Ee,n),p(e,G,n),a(G,Je),p(e,_e,n),p(e,j,n),a(j,y),a(y,Qe),a(y,V),a(V,Ve),a(y,Xe),a(y,X),a(X,Ye),a(y,et),a(j,tt),a(j,P),a(P,at),a(P,Y),a(Y,ot),a(P,st),a(P,ee),a(ee,lt),a(P,rt),p(e,ge,n),p(e,O,n),a(O,A),a(A,ye),a(O,nt),p(e,Pe,n),p(e,D,n),a(D,it),a(D,I),a(I,ct),a(D,pt),Ae=!0},p(e,[n]){const te={};n&1&&(te.$$scope={dirty:n,ctx:e}),S.$set(te)},i(e){Ae||(qt(S.$$.fragment,e),Ae=!0)},o(e){Ft(S.$$.fragment,e),Ae=!1},d(e){e&&t(u),e&&t(ae),e&&t(T),e&&t(se),e&&t(m),e&&t(le),e&&t(C),e&&t(ne),e&&t(L),e&&t(ie),e&&t(H),e&&t(pe),e&&t(W),e&&t(ue),e&&t($),e&&t(fe),e&&t(K),e&&t(de),Rt(S,e),e&&t(me),e&&t(x),e&&t(ve),e&&t(w),e&&t(be),e&&t(z),e&&t(Ee),e&&t(G),e&&t(_e),e&&t(j),e&&t(ge),e&&t(O),e&&t(Pe),e&&t(D)}}}const Yt={hidden:!0,slug:"project-structure",title:"Project Structure",date:"2023-04-22T21:55:21.800Z",excerpt:"How code and structure are organized.",coverImage:"/images/posts/project-structure.jpg",tags:["Documentation"]};class ea extends Nt{constructor(u){super(),Lt(this,u,null,Qt,Wt,{})}}export{ea as default,Yt as metadata};
